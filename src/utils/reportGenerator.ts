import jsPDF from 'jspdf';
import { JobSubmission } from '@/types/job';
import { ProjectCategory, getProjectCategoryById } from '@/data/projects'; // Added import

export const generateJobPDF = (job: JobSubmission, allProjects?: ProjectCategory[]): void => { // Added allProjects parameter
  const pdf = new jsPDF();
  
  // Set font
  pdf.setFont('helvetica');
  
  // Title
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Material Calculation Job Assignment', 20, 30);
  
  // Job Number
  pdf.setFontSize(16);
  pdf.text(`Job Number: ${job.jobNumber}`, 20, 45);
  
  // Basic Information
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  
  let yPosition = 65;

  // Project
  pdf.setFont('helvetica', 'bold');
  pdf.text('Project:', 20, yPosition);
  pdf.setFont('helvetica', 'normal');
  const projectNameForPdf = allProjects && job.project 
    ? (getProjectCategoryById(job.project, allProjects)?.name || job.project) 
    : (job.project || 'N/A');
  pdf.text(projectNameForPdf, 60, yPosition);
  yPosition += 10;
  
  // Computation
  pdf.setFont('helvetica', 'bold');
  pdf.text('Computation:', 20, yPosition);
  pdf.setFont('helvetica', 'normal');
  pdf.text(job.computation || 'N/A', 60, yPosition);
  yPosition += 10;
  
  // Package
  pdf.setFont('helvetica', 'bold');
  pdf.text('Package:', 20, yPosition);
  pdf.setFont('helvetica', 'normal');
  pdf.text(job.package || 'N/A', 60, yPosition);
  yPosition += 10;
  
  // Type
  pdf.setFont('helvetica', 'bold');
  pdf.text('Type:', 20, yPosition);
  pdf.setFont('helvetica', 'normal');
  pdf.text(job.type || 'N/A', 60, yPosition);
  yPosition += 10;
  
  // Title
  pdf.setFont('helvetica', 'bold');
  pdf.text('Job Title:', 20, yPosition);
  pdf.setFont('helvetica', 'normal');
  const titleLines = pdf.splitTextToSize(job.title, 150);
  pdf.text(titleLines, 20, yPosition + 10);
  yPosition += titleLines.length * 5 + 15;
  
  // Objectives
  pdf.setFont('helvetica', 'bold');
  pdf.text('Objectives:', 20, yPosition);
  yPosition += 10;
  pdf.setFont('helvetica', 'normal');
  const objectiveLines = pdf.splitTextToSize(job.objectives, 170);
  pdf.text(objectiveLines, 20, yPosition);
  yPosition += objectiveLines.length * 5 + 15;
  
  // Requirements
  pdf.setFont('helvetica', 'bold');
  pdf.text('Requirements:', 20, yPosition);
  yPosition += 10;
  pdf.setFont('helvetica', 'normal');
  const requirementLines = pdf.splitTextToSize(job.requirements, 170);
  pdf.text(requirementLines, 20, yPosition);
  yPosition += requirementLines.length * 5 + 20;
  
  // Submission Details
  pdf.setFont('helvetica', 'bold');
  pdf.text('Submission Details:', 20, yPosition);
  yPosition += 10;
  
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Submitted by: ${job.submittedBy}`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Submitted on: ${new Date(job.submittedDate).toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  })}`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Status: ${job.status.charAt(0).toUpperCase() + job.status.slice(1)}`, 20, yPosition);
  
  // Footer
  const pageHeight = pdf.internal.pageSize.height;
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'italic');
  pdf.text('Generated by Material Calculation Job System', 20, pageHeight - 20);
  pdf.text(`Generated on: ${new Date().toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  })}`, 20, pageHeight - 10);
  
  // Save the PDF
  pdf.save(`Job_${job.jobNumber}_${job.title.replace(/[^a-zA-Z0-9]/g, '_')}.pdf`);
};

export const generateMarkdownReport = (job: JobSubmission, allProjects?: ProjectCategory[]): string => { // Added allProjects parameter
  const projectName = allProjects && job.project 
    ? (getProjectCategoryById(job.project, allProjects)?.name || job.project) 
    : (job.project || 'N/A');
  const computationName = job.computation || 'N/A';
  const packageName = job.package || 'N/A';
  const typeName = job.type || 'N/A';

  return `# Material Calculation Job Assignment

## Job Information
- **Job Number:** ${job.jobNumber}
- **Project:** ${projectName}
- **Computation:** ${computationName}
- **Package:** ${packageName}
- **Type:** ${typeName}

## Job Details

### Title
${job.title}

### Objectives
${job.objectives}

### Requirements
${job.requirements}

## Submission Information
- **Submitted by:** ${job.submittedBy}
- **Submitted on:** ${new Date(job.submittedDate).toLocaleDateString('en-US', { 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
})}
- **Status:** ${job.status.charAt(0).toUpperCase() + job.status.slice(1)}

---
*Generated by Material Calculation Job System on ${new Date().toLocaleDateString('en-US', { 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
})}*
`;
};
